// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module countone_countone_Pipeline_VITIS_LOOP_139_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        freq5_V_address0,
        freq5_V_ce0,
        freq5_V_q0,
        freq4_V_address0,
        freq4_V_ce0,
        freq4_V_q0,
        chsq_V_out,
        chsq_V_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] freq5_V_address0;
output   freq5_V_ce0;
input  [12:0] freq5_V_q0;
output  [9:0] freq4_V_address0;
output   freq4_V_ce0;
input  [12:0] freq4_V_q0;
output  [33:0] chsq_V_out;
output   chsq_V_out_ap_vld;

reg ap_idle;
reg freq5_V_ce0;
reg freq4_V_ce0;
reg chsq_V_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln1057_fu_213_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [9:0] evalue_V_address0;
reg    evalue_V_ce0;
wire   [10:0] evalue_V_q0;
wire   [9:0] evalue_rev_V_address0;
reg    evalue_rev_V_ce0;
wire   [13:0] evalue_rev_V_q0;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln1057_reg_772;
reg   [0:0] icmp_ln1057_reg_772_pp0_iter2_reg;
reg   [0:0] icmp_ln1057_reg_772_pp0_iter3_reg;
reg   [0:0] icmp_ln1057_reg_772_pp0_iter4_reg;
reg   [0:0] icmp_ln1057_reg_772_pp0_iter5_reg;
reg   [0:0] icmp_ln1057_reg_772_pp0_iter6_reg;
reg   [0:0] icmp_ln1057_reg_772_pp0_iter7_reg;
reg   [0:0] icmp_ln1057_reg_772_pp0_iter8_reg;
wire   [0:0] icmp_ln1057_2_fu_316_p2;
reg   [0:0] icmp_ln1057_2_reg_786;
reg   [0:0] icmp_ln1057_2_reg_786_pp0_iter2_reg;
reg   [0:0] icmp_ln1057_2_reg_786_pp0_iter3_reg;
reg   [0:0] icmp_ln1057_2_reg_786_pp0_iter4_reg;
reg   [0:0] icmp_ln1057_2_reg_786_pp0_iter5_reg;
reg   [0:0] icmp_ln1057_2_reg_786_pp0_iter6_reg;
reg   [0:0] icmp_ln1057_2_reg_786_pp0_iter7_reg;
reg   [0:0] icmp_ln1057_2_reg_786_pp0_iter8_reg;
reg   [0:0] icmp_ln1057_2_reg_786_pp0_iter9_reg;
reg   [13:0] ev_r_V_reg_802;
reg   [13:0] ev_r_V_reg_802_pp0_iter3_reg;
reg   [13:0] ev_r_V_reg_802_pp0_iter4_reg;
reg   [13:0] ev_r_V_reg_802_pp0_iter5_reg;
wire   [11:0] ev_V_2_fu_593_p3;
reg   [11:0] ev_V_2_reg_807;
wire   [23:0] zext_ln1169_fu_601_p1;
wire   [33:0] select_ln160_fu_628_p3;
reg   [33:0] select_ln160_reg_828;
wire   [63:0] zext_ln573_1_fu_310_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln573_fu_322_p1;
wire   [63:0] zext_ln573_2_fu_333_p1;
reg   [2:0] letters_V_fu_70;
wire   [2:0] letters_V_9_fu_508_p3;
wire    ap_loop_init;
reg   [2:0] letters_V_1_fu_74;
wire   [2:0] letters_V_8_fu_494_p3;
reg   [2:0] letters_V_2_fu_78;
wire   [2:0] letters_V_7_fu_472_p3;
reg   [2:0] letters_V_3_fu_82;
wire   [2:0] letters_V_6_fu_450_p3;
reg   [2:0] letters_V_4_fu_86;
wire   [2:0] letters_V_5_fu_422_p3;
reg   [11:0] index4_V_fu_90;
wire   [11:0] index4_V_2_fu_344_p3;
reg   [11:0] index5_V_fu_94;
wire   [11:0] index5_V_2_fu_352_p3;
reg   [33:0] chsq_V_fu_98;
wire   [33:0] chsq_V_4_fu_676_p3;
reg   [11:0] i_V_3_fu_102;
wire   [11:0] i_V_5_fu_219_p2;
wire    ap_block_pp0_stage0_01001;
wire   [1:0] trunc_ln_fu_246_p4;
wire   [1:0] tmp_1_fu_276_p4;
wire   [1:0] trunc_ln223_3_fu_256_p4;
wire   [1:0] tmp_2_fu_286_p4;
wire   [1:0] ret_7_fu_266_p4;
wire   [9:0] pattern_V_fu_296_p6;
wire   [11:0] index4_V_1_fu_338_p2;
wire   [11:0] index5_V_1_fu_327_p2;
wire   [0:0] icmp_ln1049_fu_360_p2;
wire   [0:0] icmp_ln1049_1_fu_366_p2;
wire   [0:0] icmp_ln1049_2_fu_372_p2;
wire   [0:0] icmp_ln1049_3_fu_378_p2;
wire   [0:0] and_ln170_1_fu_390_p2;
wire   [0:0] and_ln170_fu_384_p2;
wire   [0:0] icmp_ln1049_4_fu_402_p2;
wire   [2:0] add_ln223_2_fu_408_p2;
wire   [0:0] and_ln170_2_fu_396_p2;
wire   [2:0] select_ln171_fu_414_p3;
wire   [2:0] add_ln223_3_fu_436_p2;
wire   [0:0] and_ln172_fu_430_p2;
wire   [2:0] select_ln173_fu_442_p3;
wire   [2:0] add_ln223_4_fu_458_p2;
wire   [2:0] select_ln175_fu_464_p3;
wire   [2:0] add_ln223_5_fu_480_p2;
wire   [2:0] select_ln176_fu_486_p3;
wire   [2:0] add_ln223_6_fu_502_p2;
wire   [11:0] trunc_ln74_fu_560_p1;
wire   [11:0] trunc_ln74_1_fu_564_p1;
wire   [11:0] zext_ln74_fu_556_p1;
wire   [11:0] tmp_V_3_fu_568_p3;
wire   [0:0] icmp_ln1547_fu_575_p2;
wire   [11:0] sub_ln712_fu_581_p2;
wire   [11:0] sub_ln712_1_fu_587_p2;
wire   [23:0] grp_fu_693_p2;
wire   [37:0] tmp_fu_610_p1;
wire  signed [37:0] grp_fu_700_p2;
wire   [4:0] tmp_fu_610_p4;
wire   [37:0] trunc_ln160_fu_625_p0;
wire   [0:0] icmp_ln1549_fu_619_p2;
wire   [33:0] trunc_ln160_fu_625_p1;
wire   [0:0] tmp_3_fu_639_p3;
wire   [0:0] xor_ln1548_fu_647_p2;
wire   [0:0] and_ln1057_fu_663_p2;
wire   [33:0] chsq_V_1_fu_653_p2;
wire   [33:0] chsq_V_2_fu_658_p2;
wire   [33:0] chsq_V_3_fu_668_p3;
wire   [11:0] grp_fu_693_p0;
wire   [11:0] grp_fu_693_p1;
wire   [23:0] grp_fu_700_p0;
wire   [13:0] grp_fu_700_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [37:0] grp_fu_700_p00;
wire   [37:0] grp_fu_700_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_done_reg = 1'b0;
end

countone_countone_Pipeline_VITIS_LOOP_139_3_evalue_V #(
    .DataWidth( 11 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
evalue_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(evalue_V_address0),
    .ce0(evalue_V_ce0),
    .q0(evalue_V_q0)
);

countone_countone_Pipeline_VITIS_LOOP_139_3_evalue_rev_V #(
    .DataWidth( 14 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
evalue_rev_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(evalue_rev_V_address0),
    .ce0(evalue_rev_V_ce0),
    .q0(evalue_rev_V_q0)
);

countone_mul_mul_12ns_12ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 24 ))
mul_mul_12ns_12ns_24_4_1_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_693_p0),
    .din1(grp_fu_693_p1),
    .ce(1'b1),
    .dout(grp_fu_693_p2)
);

countone_mul_mul_24ns_14ns_38_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 24 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 38 ))
mul_mul_24ns_14ns_38_4_1_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_700_p0),
    .din1(grp_fu_700_p1),
    .ce(1'b1),
    .dout(grp_fu_700_p2)
);

countone_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter9_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            chsq_V_fu_98 <= 34'd0;
        end else if ((ap_enable_reg_pp0_iter10 == 1'b1)) begin
            chsq_V_fu_98 <= chsq_V_4_fu_676_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_V_3_fu_102 <= 12'd0;
        end else if (((icmp_ln1057_fu_213_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            i_V_3_fu_102 <= i_V_5_fu_219_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            index4_V_fu_90 <= 12'd0;
        end else if (((icmp_ln1057_fu_213_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            index4_V_fu_90 <= index4_V_2_fu_344_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            index5_V_fu_94 <= 12'd0;
        end else if (((icmp_ln1057_fu_213_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            index5_V_fu_94 <= index5_V_2_fu_352_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            letters_V_1_fu_74 <= 3'd0;
        end else if (((icmp_ln1057_fu_213_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            letters_V_1_fu_74 <= letters_V_8_fu_494_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            letters_V_2_fu_78 <= 3'd0;
        end else if (((icmp_ln1057_fu_213_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            letters_V_2_fu_78 <= letters_V_7_fu_472_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            letters_V_3_fu_82 <= 3'd0;
        end else if (((icmp_ln1057_fu_213_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            letters_V_3_fu_82 <= letters_V_6_fu_450_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            letters_V_4_fu_86 <= 3'd0;
        end else if (((icmp_ln1057_fu_213_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            letters_V_4_fu_86 <= letters_V_5_fu_422_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            letters_V_fu_70 <= 3'd0;
        end else if (((icmp_ln1057_fu_213_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            letters_V_fu_70 <= letters_V_9_fu_508_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        icmp_ln1057_reg_772 <= icmp_ln1057_fu_213_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        ev_V_2_reg_807 <= ev_V_2_fu_593_p3;
        ev_r_V_reg_802 <= evalue_rev_V_q0;
        ev_r_V_reg_802_pp0_iter3_reg <= ev_r_V_reg_802;
        ev_r_V_reg_802_pp0_iter4_reg <= ev_r_V_reg_802_pp0_iter3_reg;
        ev_r_V_reg_802_pp0_iter5_reg <= ev_r_V_reg_802_pp0_iter4_reg;
        icmp_ln1057_2_reg_786_pp0_iter2_reg <= icmp_ln1057_2_reg_786;
        icmp_ln1057_2_reg_786_pp0_iter3_reg <= icmp_ln1057_2_reg_786_pp0_iter2_reg;
        icmp_ln1057_2_reg_786_pp0_iter4_reg <= icmp_ln1057_2_reg_786_pp0_iter3_reg;
        icmp_ln1057_2_reg_786_pp0_iter5_reg <= icmp_ln1057_2_reg_786_pp0_iter4_reg;
        icmp_ln1057_2_reg_786_pp0_iter6_reg <= icmp_ln1057_2_reg_786_pp0_iter5_reg;
        icmp_ln1057_2_reg_786_pp0_iter7_reg <= icmp_ln1057_2_reg_786_pp0_iter6_reg;
        icmp_ln1057_2_reg_786_pp0_iter8_reg <= icmp_ln1057_2_reg_786_pp0_iter7_reg;
        icmp_ln1057_2_reg_786_pp0_iter9_reg <= icmp_ln1057_2_reg_786_pp0_iter8_reg;
        icmp_ln1057_reg_772_pp0_iter2_reg <= icmp_ln1057_reg_772;
        icmp_ln1057_reg_772_pp0_iter3_reg <= icmp_ln1057_reg_772_pp0_iter2_reg;
        icmp_ln1057_reg_772_pp0_iter4_reg <= icmp_ln1057_reg_772_pp0_iter3_reg;
        icmp_ln1057_reg_772_pp0_iter5_reg <= icmp_ln1057_reg_772_pp0_iter4_reg;
        icmp_ln1057_reg_772_pp0_iter6_reg <= icmp_ln1057_reg_772_pp0_iter5_reg;
        icmp_ln1057_reg_772_pp0_iter7_reg <= icmp_ln1057_reg_772_pp0_iter6_reg;
        icmp_ln1057_reg_772_pp0_iter8_reg <= icmp_ln1057_reg_772_pp0_iter7_reg;
        select_ln160_reg_828 <= select_ln160_fu_628_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1057_fu_213_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln1057_2_reg_786 <= icmp_ln1057_2_fu_316_p2;
    end
end

always @ (*) begin
    if (((icmp_ln1057_fu_213_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter9_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1057_reg_772_pp0_iter8_reg == 1'd1))) begin
        chsq_V_out_ap_vld = 1'b1;
    end else begin
        chsq_V_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        evalue_V_ce0 = 1'b1;
    end else begin
        evalue_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        evalue_rev_V_ce0 = 1'b1;
    end else begin
        evalue_rev_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        freq4_V_ce0 = 1'b1;
    end else begin
        freq4_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        freq5_V_ce0 = 1'b1;
    end else begin
        freq5_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln223_2_fu_408_p2 = (letters_V_4_fu_86 + 3'd1);

assign add_ln223_3_fu_436_p2 = (letters_V_3_fu_82 + 3'd1);

assign add_ln223_4_fu_458_p2 = (letters_V_2_fu_78 + 3'd1);

assign add_ln223_5_fu_480_p2 = (letters_V_1_fu_74 + 3'd1);

assign add_ln223_6_fu_502_p2 = (letters_V_fu_70 + 3'd1);

assign and_ln1057_fu_663_p2 = (xor_ln1548_fu_647_p2 & icmp_ln1057_2_reg_786_pp0_iter9_reg);

assign and_ln170_1_fu_390_p2 = (icmp_ln1049_3_fu_378_p2 & icmp_ln1049_2_fu_372_p2);

assign and_ln170_2_fu_396_p2 = (and_ln170_fu_384_p2 & and_ln170_1_fu_390_p2);

assign and_ln170_fu_384_p2 = (icmp_ln1049_fu_360_p2 & icmp_ln1049_1_fu_366_p2);

assign and_ln172_fu_430_p2 = (icmp_ln1049_1_fu_366_p2 & and_ln170_1_fu_390_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign chsq_V_1_fu_653_p2 = (select_ln160_reg_828 + chsq_V_fu_98);

assign chsq_V_2_fu_658_p2 = (chsq_V_fu_98 - select_ln160_reg_828);

assign chsq_V_3_fu_668_p3 = ((and_ln1057_fu_663_p2[0:0] == 1'b1) ? chsq_V_1_fu_653_p2 : chsq_V_2_fu_658_p2);

assign chsq_V_4_fu_676_p3 = ((tmp_3_fu_639_p3[0:0] == 1'b1) ? chsq_V_fu_98 : chsq_V_3_fu_668_p3);

assign chsq_V_out = chsq_V_fu_98;

assign ev_V_2_fu_593_p3 = ((icmp_ln1547_fu_575_p2[0:0] == 1'b1) ? sub_ln712_fu_581_p2 : sub_ln712_1_fu_587_p2);

assign evalue_V_address0 = zext_ln573_1_fu_310_p1;

assign evalue_rev_V_address0 = zext_ln573_1_fu_310_p1;

assign freq4_V_address0 = zext_ln573_2_fu_333_p1;

assign freq5_V_address0 = zext_ln573_fu_322_p1;

assign grp_fu_693_p0 = zext_ln1169_fu_601_p1;

assign grp_fu_693_p1 = zext_ln1169_fu_601_p1;

assign grp_fu_700_p0 = grp_fu_700_p00;

assign grp_fu_700_p00 = grp_fu_693_p2;

assign grp_fu_700_p1 = grp_fu_700_p10;

assign grp_fu_700_p10 = ev_r_V_reg_802_pp0_iter5_reg;

assign i_V_5_fu_219_p2 = (i_V_3_fu_102 + 12'd1);

assign icmp_ln1049_1_fu_366_p2 = ((letters_V_2_fu_78 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln1049_2_fu_372_p2 = ((letters_V_1_fu_74 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln1049_3_fu_378_p2 = ((letters_V_fu_70 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln1049_4_fu_402_p2 = ((letters_V_4_fu_86 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln1049_fu_360_p2 = ((letters_V_3_fu_82 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln1057_2_fu_316_p2 = ((i_V_3_fu_102 < 12'd3125) ? 1'b1 : 1'b0);

assign icmp_ln1057_fu_213_p2 = ((i_V_3_fu_102 == 12'd3750) ? 1'b1 : 1'b0);

assign icmp_ln1547_fu_575_p2 = ((zext_ln74_fu_556_p1 > tmp_V_3_fu_568_p3) ? 1'b1 : 1'b0);

assign icmp_ln1549_fu_619_p2 = ((tmp_fu_610_p4 == 5'd0) ? 1'b1 : 1'b0);

assign index4_V_1_fu_338_p2 = (index4_V_fu_90 + 12'd1);

assign index4_V_2_fu_344_p3 = ((icmp_ln1057_2_fu_316_p2[0:0] == 1'b1) ? index4_V_fu_90 : index4_V_1_fu_338_p2);

assign index5_V_1_fu_327_p2 = (index5_V_fu_94 + 12'd1);

assign index5_V_2_fu_352_p3 = ((icmp_ln1057_2_fu_316_p2[0:0] == 1'b1) ? index5_V_1_fu_327_p2 : index5_V_fu_94);

assign letters_V_5_fu_422_p3 = ((and_ln170_2_fu_396_p2[0:0] == 1'b1) ? select_ln171_fu_414_p3 : letters_V_4_fu_86);

assign letters_V_6_fu_450_p3 = ((and_ln172_fu_430_p2[0:0] == 1'b1) ? select_ln173_fu_442_p3 : letters_V_3_fu_82);

assign letters_V_7_fu_472_p3 = ((and_ln170_1_fu_390_p2[0:0] == 1'b1) ? select_ln175_fu_464_p3 : letters_V_2_fu_78);

assign letters_V_8_fu_494_p3 = ((icmp_ln1049_3_fu_378_p2[0:0] == 1'b1) ? select_ln176_fu_486_p3 : letters_V_1_fu_74);

assign letters_V_9_fu_508_p3 = ((icmp_ln1049_3_fu_378_p2[0:0] == 1'b1) ? 3'd0 : add_ln223_6_fu_502_p2);

assign pattern_V_fu_296_p6 = {{{{{trunc_ln_fu_246_p4}, {tmp_1_fu_276_p4}}, {trunc_ln223_3_fu_256_p4}}, {tmp_2_fu_286_p4}}, {ret_7_fu_266_p4}};

assign ret_7_fu_266_p4 = {{letters_V_fu_70[2:1]}};

assign select_ln160_fu_628_p3 = ((icmp_ln1549_fu_619_p2[0:0] == 1'b1) ? trunc_ln160_fu_625_p1 : 34'd8589934592);

assign select_ln171_fu_414_p3 = ((icmp_ln1049_4_fu_402_p2[0:0] == 1'b1) ? 3'd6 : add_ln223_2_fu_408_p2);

assign select_ln173_fu_442_p3 = ((icmp_ln1049_fu_360_p2[0:0] == 1'b1) ? 3'd0 : add_ln223_3_fu_436_p2);

assign select_ln175_fu_464_p3 = ((icmp_ln1049_1_fu_366_p2[0:0] == 1'b1) ? 3'd0 : add_ln223_4_fu_458_p2);

assign select_ln176_fu_486_p3 = ((icmp_ln1049_2_fu_372_p2[0:0] == 1'b1) ? 3'd0 : add_ln223_5_fu_480_p2);

assign sub_ln712_1_fu_587_p2 = (tmp_V_3_fu_568_p3 - zext_ln74_fu_556_p1);

assign sub_ln712_fu_581_p2 = (zext_ln74_fu_556_p1 - tmp_V_3_fu_568_p3);

assign tmp_1_fu_276_p4 = {{letters_V_3_fu_82[2:1]}};

assign tmp_2_fu_286_p4 = {{letters_V_1_fu_74[2:1]}};

assign tmp_3_fu_639_p3 = chsq_V_fu_98[32'd33];

assign tmp_V_3_fu_568_p3 = ((icmp_ln1057_2_reg_786[0:0] == 1'b1) ? trunc_ln74_fu_560_p1 : trunc_ln74_1_fu_564_p1);

assign tmp_fu_610_p1 = grp_fu_700_p2;

assign tmp_fu_610_p4 = {{tmp_fu_610_p1[37:33]}};

assign trunc_ln160_fu_625_p0 = grp_fu_700_p2;

assign trunc_ln160_fu_625_p1 = trunc_ln160_fu_625_p0[33:0];

assign trunc_ln223_3_fu_256_p4 = {{letters_V_2_fu_78[2:1]}};

assign trunc_ln74_1_fu_564_p1 = freq4_V_q0[11:0];

assign trunc_ln74_fu_560_p1 = freq5_V_q0[11:0];

assign trunc_ln_fu_246_p4 = {{letters_V_4_fu_86[2:1]}};

assign xor_ln1548_fu_647_p2 = (tmp_3_fu_639_p3 ^ 1'd1);

assign zext_ln1169_fu_601_p1 = ev_V_2_reg_807;

assign zext_ln573_1_fu_310_p1 = pattern_V_fu_296_p6;

assign zext_ln573_2_fu_333_p1 = index4_V_fu_90;

assign zext_ln573_fu_322_p1 = index5_V_fu_94;

assign zext_ln74_fu_556_p1 = evalue_V_q0;

endmodule //countone_countone_Pipeline_VITIS_LOOP_139_3
