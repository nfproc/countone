// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module countone_countone_Pipeline_VITIS_LOOP_93_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        freq_out_TREADY,
        rand_in_TDATA,
        rand_in_TVALID,
        rand_in_TREADY,
        freq_out_TDATA,
        freq_out_TVALID,
        freq4_V_address0,
        freq4_V_ce0,
        freq4_V_we0,
        freq4_V_d0,
        freq4_V_q0,
        freq5_V_address0,
        freq5_V_ce0,
        freq5_V_we0,
        freq5_V_d0,
        freq5_V_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 3'd1;
parameter    ap_ST_fsm_pp0_stage1 = 3'd2;
parameter    ap_ST_fsm_pp0_stage2 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   freq_out_TREADY;
input  [7:0] rand_in_TDATA;
input   rand_in_TVALID;
output   rand_in_TREADY;
output  [15:0] freq_out_TDATA;
output   freq_out_TVALID;
output  [9:0] freq4_V_address0;
output   freq4_V_ce0;
output   freq4_V_we0;
output  [12:0] freq4_V_d0;
input  [12:0] freq4_V_q0;
output  [11:0] freq5_V_address0;
output   freq5_V_ce0;
output   freq5_V_we0;
output  [12:0] freq5_V_d0;
input  [12:0] freq5_V_q0;

reg ap_idle;
reg rand_in_TREADY;
reg freq_out_TVALID;
reg[9:0] freq4_V_address0;
reg freq4_V_ce0;
reg freq4_V_we0;
reg[11:0] freq5_V_address0;
reg freq5_V_ce0;
reg freq5_V_we0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
reg   [0:0] icmp_ln1061_reg_656;
reg   [0:0] icmp_ln1061_reg_656_pp0_iter1_reg;
reg   [0:0] icmp_ln1049_reg_689;
reg   [0:0] icmp_ln1053_reg_693;
reg    ap_predicate_op118_write_state6;
reg    ap_block_state6_pp0_stage2_iter1;
reg    ap_block_state6_io;
reg    ap_block_pp0_stage2_subdone;
reg   [0:0] icmp_ln1057_reg_652;
reg    ap_condition_exit_pp0_iter0_stage2;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [7:0] char2letter_V_address0;
reg    char2letter_V_ce0;
wire   [2:0] char2letter_V_q0;
wire   [7:0] char2ones_V_address0;
reg    char2ones_V_ce0;
wire   [3:0] char2ones_V_q0;
reg    rand_in_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
reg    freq_out_TDATA_blk_n;
wire    ap_block_pp0_stage2;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln1057_fu_231_p2;
wire   [0:0] icmp_ln1061_fu_253_p2;
wire   [0:0] icmp_ln1061_1_fu_259_p2;
reg   [0:0] icmp_ln1061_1_reg_660;
reg   [0:0] icmp_ln1061_1_reg_660_pp0_iter1_reg;
reg   [9:0] freq4_V_addr_reg_664;
reg    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state5_pp0_stage1_iter1;
reg    ap_block_pp0_stage1_11001;
wire   [7:0] xor_ln103_fu_292_p2;
reg   [7:0] xor_ln103_reg_674;
wire   [12:0] select_ln123_fu_312_p3;
reg   [12:0] select_ln123_reg_679;
wire   [11:0] index5_V_fu_377_p2;
reg   [11:0] index5_V_reg_684;
reg    ap_block_pp0_stage2_11001;
wire   [0:0] icmp_ln1049_fu_482_p2;
wire   [0:0] icmp_ln1053_fu_488_p2;
reg   [11:0] freq5_V_addr_reg_697;
wire   [12:0] select_ln125_fu_527_p3;
reg   [12:0] select_ln125_reg_707;
reg    ap_enable_reg_pp0_iter0_reg;
wire   [63:0] zext_ln573_fu_265_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln96_fu_287_p1;
wire   [63:0] zext_ln573_1_fu_505_p1;
wire   [63:0] zext_ln103_fu_509_p1;
reg   [7:0] last_char_fu_86;
wire    ap_loop_init;
reg   [17:0] i_V_fu_90;
reg   [17:0] ap_sig_allocacmp_i_V_1;
wire   [17:0] i_V_2_fu_237_p2;
reg   [11:0] index4_V_fu_94;
wire   [11:0] index_buf_fu_383_p2;
reg   [11:0] phi_ln1525_2_fu_98;
wire   [11:0] phitmp_fu_421_p2;
reg   [7:0] phi_ln1525_1_fu_102;
wire   [7:0] phitmp15_fu_435_p2;
reg   [5:0] phi_ln1525_fu_106;
wire   [5:0] phitmp16_fu_453_p2;
reg   [7:0] last_char_1_fu_110;
reg   [7:0] last_char_2_fu_114;
reg   [7:0] last_char_3_fu_118;
reg   [13:0] monobit_one_V_fu_122;
wire   [13:0] monobit_one_V_2_fu_542_p2;
wire   [13:0] zext_ln217_fu_563_p1;
reg   [11:0] monobit_cnt_V_fu_126;
wire   [11:0] monobit_cnt_V_1_fu_494_p2;
reg    ap_block_pp0_stage2_01001;
wire   [15:0] tmp_fu_243_p4;
wire   [0:0] tmp_1_fu_298_p3;
wire   [12:0] add_ln223_fu_306_p2;
wire   [11:0] zext_ln1525_fu_359_p1;
wire   [11:0] add_ln223_2_fu_371_p2;
wire   [11:0] shl_ln1525_fu_353_p2;
wire   [8:0] zext_ln1057_fu_349_p1;
wire   [8:0] zext_ln223_1_fu_367_p1;
wire   [8:0] index_buf_1_fu_389_p2;
wire   [5:0] zext_ln223_fu_363_p1;
wire   [5:0] index_buf_2_fu_399_p2;
wire   [10:0] p_shl3_fu_409_p3;
wire   [11:0] p_shl3_cast_fu_417_p1;
wire   [11:0] zext_ln71_fu_395_p1;
wire   [7:0] p_shl2_fu_427_p3;
wire   [7:0] zext_ln71_1_fu_405_p1;
wire   [4:0] p_shl1_fu_441_p3;
wire   [5:0] p_shl1_cast_fu_449_p1;
wire   [0:0] tmp_2_fu_513_p3;
wire   [12:0] add_ln223_1_fu_521_p2;
wire   [13:0] zext_ln870_fu_538_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [2:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to1;
reg    ap_block_pp0_stage1_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_521;
reg    ap_condition_526;
reg    ap_condition_531;
reg    ap_condition_536;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

countone_countone_Pipeline_VITIS_LOOP_93_2_char2letter_V #(
    .DataWidth( 3 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
char2letter_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(char2letter_V_address0),
    .ce0(char2letter_V_ce0),
    .q0(char2letter_V_q0)
);

countone_countone_Pipeline_VITIS_LOOP_93_2_char2ones_V #(
    .DataWidth( 4 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
char2ones_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(char2ones_V_address0),
    .ce0(char2ones_V_ce0),
    .q0(char2ones_V_q0)
);

countone_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage2),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage2)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln1057_fu_231_p2 == 1'd0))) begin
            i_V_fu_90 <= i_V_2_fu_237_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_V_fu_90 <= 18'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        last_char_1_fu_110 <= 8'd0;
    end else if (((icmp_ln1057_reg_652 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        last_char_1_fu_110 <= last_char_2_fu_114;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        last_char_2_fu_114 <= 8'd0;
    end else if (((icmp_ln1057_reg_652 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        last_char_2_fu_114 <= last_char_3_fu_118;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        last_char_3_fu_118 <= 8'd0;
    end else if (((icmp_ln1057_reg_652 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        last_char_3_fu_118 <= rand_in_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        last_char_fu_86 <= 8'd0;
    end else if (((icmp_ln1057_reg_652 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        last_char_fu_86 <= last_char_1_fu_110;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if ((1'b1 == ap_condition_531)) begin
            monobit_cnt_V_fu_126 <= monobit_cnt_V_1_fu_494_p2;
        end else if ((1'b1 == ap_condition_526)) begin
            monobit_cnt_V_fu_126 <= 12'd1;
        end else if ((1'b1 == ap_condition_521)) begin
            monobit_cnt_V_fu_126 <= 12'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_536)) begin
        if ((icmp_ln1049_reg_689 == 1'd1)) begin
            monobit_one_V_fu_122 <= zext_ln217_fu_563_p1;
        end else if ((icmp_ln1049_reg_689 == 1'd0)) begin
            monobit_one_V_fu_122 <= monobit_one_V_2_fu_542_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        phi_ln1525_fu_106 <= 6'd0;
    end else if (((icmp_ln1057_reg_652 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        phi_ln1525_fu_106 <= phitmp16_fu_453_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1061_1_fu_259_p2 == 1'd1) & (icmp_ln1061_fu_253_p2 == 1'd0) & (icmp_ln1057_fu_231_p2 == 1'd0))) begin
        freq4_V_addr_reg_664 <= zext_ln573_fu_265_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1061_reg_656 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1061_1_reg_660 == 1'd1))) begin
        freq5_V_addr_reg_697 <= zext_ln573_1_fu_505_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1061_reg_656 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln1049_reg_689 <= icmp_ln1049_fu_482_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1061_reg_656 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1049_fu_482_p2 == 1'd0))) begin
        icmp_ln1053_reg_693 <= icmp_ln1053_fu_488_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln1057_reg_652 <= icmp_ln1057_fu_231_p2;
        icmp_ln1061_1_reg_660_pp0_iter1_reg <= icmp_ln1061_1_reg_660;
        icmp_ln1061_reg_656_pp0_iter1_reg <= icmp_ln1061_reg_656;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1061_fu_253_p2 == 1'd0) & (icmp_ln1057_fu_231_p2 == 1'd0))) begin
        icmp_ln1061_1_reg_660 <= icmp_ln1061_1_fu_259_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1057_fu_231_p2 == 1'd0))) begin
        icmp_ln1061_reg_656 <= icmp_ln1061_fu_253_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1057_reg_652 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        index4_V_fu_94 <= index_buf_fu_383_p2;
        phi_ln1525_1_fu_102 <= phitmp15_fu_435_p2;
        phi_ln1525_2_fu_98 <= phitmp_fu_421_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1057_reg_652 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        index5_V_reg_684 <= index5_V_fu_377_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1057_reg_652 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln1061_reg_656 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln1061_1_reg_660 == 1'd1))) begin
        select_ln123_reg_679 <= select_ln123_fu_312_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln1061_reg_656_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln1061_1_reg_660_pp0_iter1_reg == 1'd1))) begin
        select_ln125_reg_707 <= select_ln125_fu_527_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1057_reg_652 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        xor_ln103_reg_674 <= xor_ln103_fu_292_p2;
    end
end

always @ (*) begin
    if (((icmp_ln1057_reg_652 == 1'd1) & (1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_condition_exit_pp0_iter0_stage2 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_V_1 = 18'd0;
    end else begin
        ap_sig_allocacmp_i_V_1 = i_V_fu_90;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        char2letter_V_ce0 = 1'b1;
    end else begin
        char2letter_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        char2ones_V_ce0 = 1'b1;
    end else begin
        char2ones_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            freq4_V_address0 = freq4_V_addr_reg_664;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            freq4_V_address0 = zext_ln573_fu_265_p1;
        end else begin
            freq4_V_address0 = 'bx;
        end
    end else begin
        freq4_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        freq4_V_ce0 = 1'b1;
    end else begin
        freq4_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1057_reg_652 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln1061_reg_656 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln1061_1_reg_660 == 1'd1))) begin
        freq4_V_we0 = 1'b1;
    end else begin
        freq4_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            freq5_V_address0 = freq5_V_addr_reg_697;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            freq5_V_address0 = zext_ln573_1_fu_505_p1;
        end else begin
            freq5_V_address0 = 'bx;
        end
    end else begin
        freq5_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        freq5_V_ce0 = 1'b1;
    end else begin
        freq5_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln1061_reg_656_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln1061_1_reg_660_pp0_iter1_reg == 1'd1))) begin
        freq5_V_we0 = 1'b1;
    end else begin
        freq5_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (ap_predicate_op118_write_state6 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        freq_out_TDATA_blk_n = freq_out_TREADY;
    end else begin
        freq_out_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_predicate_op118_write_state6 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        freq_out_TVALID = 1'b1;
    end else begin
        freq_out_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1057_reg_652 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        rand_in_TDATA_blk_n = rand_in_TVALID;
    end else begin
        rand_in_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln1057_reg_652 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        rand_in_TREADY = 1'b1;
    end else begin
        rand_in_TREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln223_1_fu_521_p2 = (freq5_V_q0 + 13'd1);

assign add_ln223_2_fu_371_p2 = (zext_ln1525_fu_359_p1 + index4_V_fu_94);

assign add_ln223_fu_306_p2 = (freq4_V_q0 + 13'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((rand_in_TVALID == 1'b0) & (icmp_ln1057_reg_652 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((rand_in_TVALID == 1'b0) & (icmp_ln1057_reg_652 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_01001 = ((ap_predicate_op118_write_state6 == 1'b1) & (freq_out_TREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage2_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state6_io) | ((ap_predicate_op118_write_state6 == 1'b1) & (freq_out_TREADY == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state6_io) | ((ap_predicate_op118_write_state6 == 1'b1) & (freq_out_TREADY == 1'b0))));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage1_iter0 = ((rand_in_TVALID == 1'b0) & (icmp_ln1057_reg_652 == 1'd0));
end

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_io = ((ap_predicate_op118_write_state6 == 1'b1) & (freq_out_TREADY == 1'b0));
end

always @ (*) begin
    ap_block_state6_pp0_stage2_iter1 = ((ap_predicate_op118_write_state6 == 1'b1) & (freq_out_TREADY == 1'b0));
end

always @ (*) begin
    ap_condition_521 = ((1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln1053_reg_693 == 1'd1) & (icmp_ln1049_reg_689 == 1'd0) & (icmp_ln1061_reg_656_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2));
end

always @ (*) begin
    ap_condition_526 = ((1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln1049_reg_689 == 1'd1) & (icmp_ln1061_reg_656_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2));
end

always @ (*) begin
    ap_condition_531 = ((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1061_reg_656 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1053_fu_488_p2 == 1'd0) & (icmp_ln1049_fu_482_p2 == 1'd0));
end

always @ (*) begin
    ap_condition_536 = ((1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln1061_reg_656_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage2;

always @ (*) begin
    ap_predicate_op118_write_state6 = ((icmp_ln1053_reg_693 == 1'd1) & (icmp_ln1049_reg_689 == 1'd0) & (icmp_ln1061_reg_656_pp0_iter1_reg == 1'd0));
end

assign char2letter_V_address0 = zext_ln96_fu_287_p1;

assign char2ones_V_address0 = zext_ln103_fu_509_p1;

assign freq4_V_d0 = select_ln123_reg_679;

assign freq5_V_d0 = select_ln125_reg_707;

assign freq_out_TDATA = monobit_one_V_2_fu_542_p2;

assign i_V_2_fu_237_p2 = (ap_sig_allocacmp_i_V_1 + 18'd1);

assign icmp_ln1049_fu_482_p2 = ((monobit_cnt_V_fu_126 == 12'd0) ? 1'b1 : 1'b0);

assign icmp_ln1053_fu_488_p2 = ((monobit_cnt_V_fu_126 == 12'd1999) ? 1'b1 : 1'b0);

assign icmp_ln1057_fu_231_p2 = ((ap_sig_allocacmp_i_V_1 == 18'd256004) ? 1'b1 : 1'b0);

assign icmp_ln1061_1_fu_259_p2 = ((ap_sig_allocacmp_i_V_1 > 18'd4) ? 1'b1 : 1'b0);

assign icmp_ln1061_fu_253_p2 = ((tmp_fu_243_p4 == 16'd0) ? 1'b1 : 1'b0);

assign index5_V_fu_377_p2 = (add_ln223_2_fu_371_p2 + shl_ln1525_fu_353_p2);

assign index_buf_1_fu_389_p2 = (zext_ln1057_fu_349_p1 + zext_ln223_1_fu_367_p1);

assign index_buf_2_fu_399_p2 = (phi_ln1525_fu_106 + zext_ln223_fu_363_p1);

assign index_buf_fu_383_p2 = (phi_ln1525_2_fu_98 + zext_ln1525_fu_359_p1);

assign monobit_cnt_V_1_fu_494_p2 = (monobit_cnt_V_fu_126 + 12'd1);

assign monobit_one_V_2_fu_542_p2 = (monobit_one_V_fu_122 + zext_ln870_fu_538_p1);

assign p_shl1_cast_fu_449_p1 = p_shl1_fu_441_p3;

assign p_shl1_fu_441_p3 = {{char2letter_V_q0}, {2'd0}};

assign p_shl2_fu_427_p3 = {{index_buf_2_fu_399_p2}, {2'd0}};

assign p_shl3_cast_fu_417_p1 = p_shl3_fu_409_p3;

assign p_shl3_fu_409_p3 = {{index_buf_1_fu_389_p2}, {2'd0}};

assign phitmp15_fu_435_p2 = (p_shl2_fu_427_p3 + zext_ln71_1_fu_405_p1);

assign phitmp16_fu_453_p2 = (p_shl1_cast_fu_449_p1 + zext_ln223_fu_363_p1);

assign phitmp_fu_421_p2 = (p_shl3_cast_fu_417_p1 + zext_ln71_fu_395_p1);

assign select_ln123_fu_312_p3 = ((tmp_1_fu_298_p3[0:0] == 1'b1) ? 13'd4096 : add_ln223_fu_306_p2);

assign select_ln125_fu_527_p3 = ((tmp_2_fu_513_p3[0:0] == 1'b1) ? 13'd4096 : add_ln223_1_fu_521_p2);

assign shl_ln1525_fu_353_p2 = index4_V_fu_94 << 12'd2;

assign tmp_1_fu_298_p3 = freq4_V_q0[32'd12];

assign tmp_2_fu_513_p3 = freq5_V_q0[32'd12];

assign tmp_fu_243_p4 = {{ap_sig_allocacmp_i_V_1[17:2]}};

assign xor_ln103_fu_292_p2 = (rand_in_TDATA ^ last_char_fu_86);

assign zext_ln103_fu_509_p1 = xor_ln103_reg_674;

assign zext_ln1057_fu_349_p1 = phi_ln1525_1_fu_102;

assign zext_ln1525_fu_359_p1 = char2letter_V_q0;

assign zext_ln217_fu_563_p1 = char2ones_V_q0;

assign zext_ln223_1_fu_367_p1 = char2letter_V_q0;

assign zext_ln223_fu_363_p1 = char2letter_V_q0;

assign zext_ln573_1_fu_505_p1 = index5_V_reg_684;

assign zext_ln573_fu_265_p1 = index4_V_fu_94;

assign zext_ln71_1_fu_405_p1 = index_buf_2_fu_399_p2;

assign zext_ln71_fu_395_p1 = index_buf_1_fu_389_p2;

assign zext_ln870_fu_538_p1 = char2ones_V_q0;

assign zext_ln96_fu_287_p1 = rand_in_TDATA;

endmodule //countone_countone_Pipeline_VITIS_LOOP_93_2
