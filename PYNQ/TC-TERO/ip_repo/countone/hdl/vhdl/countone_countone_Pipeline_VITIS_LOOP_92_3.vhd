-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity countone_countone_Pipeline_VITIS_LOOP_92_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    freq5_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    freq5_V_ce0 : OUT STD_LOGIC;
    freq5_V_q0 : IN STD_LOGIC_VECTOR (12 downto 0);
    freq4_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    freq4_V_ce0 : OUT STD_LOGIC;
    freq4_V_q0 : IN STD_LOGIC_VECTOR (12 downto 0);
    chsq_V_2_out : OUT STD_LOGIC_VECTOR (37 downto 0);
    chsq_V_2_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of countone_countone_Pipeline_VITIS_LOOP_92_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv38_0 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv12_EA6 : STD_LOGIC_VECTOR (11 downto 0) := "111010100110";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv12_C35 : STD_LOGIC_VECTOR (11 downto 0) := "110000110101";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv46_200000000000 : STD_LOGIC_VECTOR (45 downto 0) := "1000000000000000000000000000000000000000000000";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln1057_fu_227_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal evalue_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal evalue_V_ce0 : STD_LOGIC;
    signal evalue_V_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal evalue_rev_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal evalue_rev_V_ce0 : STD_LOGIC;
    signal evalue_rev_V_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln1057_reg_819 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1057_reg_819_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1057_reg_819_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1057_reg_819_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1057_reg_819_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1057_reg_819_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1057_reg_819_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1057_reg_819_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1057_1_fu_330_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1057_1_reg_833 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1057_1_reg_833_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1057_1_reg_833_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1057_1_reg_833_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1057_1_reg_833_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1057_1_reg_833_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1057_1_reg_833_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1057_1_reg_833_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1057_1_reg_833_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ev_r_V_reg_849 : STD_LOGIC_VECTOR (17 downto 0);
    signal ev_r_V_reg_849_pp0_iter3_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal ev_r_V_reg_849_pp0_iter4_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal ev_r_V_reg_849_pp0_iter5_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal ev_r_V_reg_849_pp0_iter6_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal ev_V_2_fu_615_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ev_V_2_reg_854 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln1169_fu_623_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_749_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_3_reg_865 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln1168_fu_638_p1 : STD_LOGIC_VECTOR (45 downto 0);
    signal trunc_ln1168_reg_880 : STD_LOGIC_VECTOR (45 downto 0);
    signal tmp_reg_885 : STD_LOGIC_VECTOR (4 downto 0);
    signal chsq_inc_V_fu_657_p3 : STD_LOGIC_VECTOR (45 downto 0);
    signal chsq_inc_V_reg_890 : STD_LOGIC_VECTOR (45 downto 0);
    signal zext_ln573_fu_324_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln573_1_fu_336_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln573_2_fu_347_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal letters_V_fu_84 : STD_LOGIC_VECTOR (2 downto 0);
    signal letters_V_9_fu_522_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal letters_V_1_fu_88 : STD_LOGIC_VECTOR (2 downto 0);
    signal letters_V_8_fu_508_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal letters_V_2_fu_92 : STD_LOGIC_VECTOR (2 downto 0);
    signal letters_V_7_fu_486_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal letters_V_3_fu_96 : STD_LOGIC_VECTOR (2 downto 0);
    signal letters_V_6_fu_464_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal letters_V_4_fu_100 : STD_LOGIC_VECTOR (2 downto 0);
    signal letters_V_5_fu_436_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal index4_V_fu_104 : STD_LOGIC_VECTOR (11 downto 0);
    signal index4_V_2_fu_358_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal index5_V_fu_108 : STD_LOGIC_VECTOR (11 downto 0);
    signal index5_V_2_fu_366_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal lhs_V_fu_112 : STD_LOGIC_VECTOR (37 downto 0);
    signal chsq_V_1_fu_732_p3 : STD_LOGIC_VECTOR (37 downto 0);
    signal i_V_fu_116 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_V_2_fu_233_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal trunc_ln_fu_260_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_1_fu_290_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln223_3_fu_270_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_2_fu_300_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ret_7_fu_280_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal pattern_V_fu_310_p6 : STD_LOGIC_VECTOR (9 downto 0);
    signal index4_V_1_fu_352_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal index5_V_1_fu_341_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln1049_fu_374_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1049_1_fu_380_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1049_2_fu_386_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1049_3_fu_392_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln123_1_fu_404_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln123_fu_398_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1049_4_fu_416_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln223_fu_422_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln123_2_fu_410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln124_fu_428_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln223_1_fu_450_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln125_fu_444_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln126_fu_456_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln223_2_fu_472_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln128_fu_478_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln223_3_fu_494_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln129_fu_500_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln223_4_fu_516_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln1057_fu_574_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln1057_1_fu_578_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln1057_fu_582_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln51_fu_570_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ov_V_fu_589_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1547_fu_597_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln712_fu_603_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln712_1_fu_609_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_632_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_632_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_632_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal icmp_ln1549_fu_652_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_667_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal lhs_V_1_fu_681_p3 : STD_LOGIC_VECTOR (45 downto 0);
    signal xor_ln1548_fu_675_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_fu_689_p2 : STD_LOGIC_VECTOR (45 downto 0);
    signal ret_V_1_fu_694_p2 : STD_LOGIC_VECTOR (45 downto 0);
    signal and_ln1057_fu_699_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_704_p4 : STD_LOGIC_VECTOR (37 downto 0);
    signal tmp_6_fu_714_p4 : STD_LOGIC_VECTOR (37 downto 0);
    signal chsq_V_fu_724_p3 : STD_LOGIC_VECTOR (37 downto 0);
    signal grp_fu_749_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_749_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_632_p00 : STD_LOGIC_VECTOR (49 downto 0);
    signal grp_fu_632_p10 : STD_LOGIC_VECTOR (49 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component countone_mul_32ns_18ns_50_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (49 downto 0) );
    end component;


    component countone_mul_mul_16ns_16ns_32_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component countone_countone_Pipeline_VITIS_LOOP_92_3_evalue_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component countone_countone_Pipeline_VITIS_LOOP_92_3_evalue_rev_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component countone_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    evalue_V_U : component countone_countone_Pipeline_VITIS_LOOP_92_3_evalue_V
    generic map (
        DataWidth => 15,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => evalue_V_address0,
        ce0 => evalue_V_ce0,
        q0 => evalue_V_q0);

    evalue_rev_V_U : component countone_countone_Pipeline_VITIS_LOOP_92_3_evalue_rev_V
    generic map (
        DataWidth => 18,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => evalue_rev_V_address0,
        ce0 => evalue_rev_V_ce0,
        q0 => evalue_rev_V_q0);

    mul_32ns_18ns_50_2_1_U7 : component countone_mul_32ns_18ns_50_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 18,
        dout_WIDTH => 50)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_632_p0,
        din1 => grp_fu_632_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_632_p2);

    mul_mul_16ns_16ns_32_4_1_U8 : component countone_mul_mul_16ns_16ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_749_p0,
        din1 => grp_fu_749_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_749_p2);

    flow_control_loop_pipe_sequential_init_U : component countone_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter9_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    i_V_fu_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_V_fu_116 <= ap_const_lv12_0;
                elsif (((icmp_ln1057_fu_227_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    i_V_fu_116 <= i_V_2_fu_233_p2;
                end if;
            end if; 
        end if;
    end process;

    index4_V_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    index4_V_fu_104 <= ap_const_lv12_0;
                elsif (((icmp_ln1057_fu_227_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    index4_V_fu_104 <= index4_V_2_fu_358_p3;
                end if;
            end if; 
        end if;
    end process;

    index5_V_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    index5_V_fu_108 <= ap_const_lv12_0;
                elsif (((icmp_ln1057_fu_227_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    index5_V_fu_108 <= index5_V_2_fu_366_p3;
                end if;
            end if; 
        end if;
    end process;

    letters_V_1_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    letters_V_1_fu_88 <= ap_const_lv3_0;
                elsif (((icmp_ln1057_fu_227_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    letters_V_1_fu_88 <= letters_V_8_fu_508_p3;
                end if;
            end if; 
        end if;
    end process;

    letters_V_2_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    letters_V_2_fu_92 <= ap_const_lv3_0;
                elsif (((icmp_ln1057_fu_227_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    letters_V_2_fu_92 <= letters_V_7_fu_486_p3;
                end if;
            end if; 
        end if;
    end process;

    letters_V_3_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    letters_V_3_fu_96 <= ap_const_lv3_0;
                elsif (((icmp_ln1057_fu_227_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    letters_V_3_fu_96 <= letters_V_6_fu_464_p3;
                end if;
            end if; 
        end if;
    end process;

    letters_V_4_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    letters_V_4_fu_100 <= ap_const_lv3_0;
                elsif (((icmp_ln1057_fu_227_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    letters_V_4_fu_100 <= letters_V_5_fu_436_p3;
                end if;
            end if; 
        end if;
    end process;

    letters_V_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    letters_V_fu_84 <= ap_const_lv3_0;
                elsif (((icmp_ln1057_fu_227_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    letters_V_fu_84 <= letters_V_9_fu_522_p3;
                end if;
            end if; 
        end if;
    end process;

    lhs_V_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    lhs_V_fu_112 <= ap_const_lv38_0;
                elsif ((ap_enable_reg_pp0_iter10 = ap_const_logic_1)) then 
                    lhs_V_fu_112 <= chsq_V_1_fu_732_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                icmp_ln1057_reg_819 <= icmp_ln1057_fu_227_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                chsq_inc_V_reg_890 <= chsq_inc_V_fu_657_p3;
                ev_V_2_reg_854 <= ev_V_2_fu_615_p3;
                ev_r_V_reg_849 <= evalue_rev_V_q0;
                ev_r_V_reg_849_pp0_iter3_reg <= ev_r_V_reg_849;
                ev_r_V_reg_849_pp0_iter4_reg <= ev_r_V_reg_849_pp0_iter3_reg;
                ev_r_V_reg_849_pp0_iter5_reg <= ev_r_V_reg_849_pp0_iter4_reg;
                ev_r_V_reg_849_pp0_iter6_reg <= ev_r_V_reg_849_pp0_iter5_reg;
                icmp_ln1057_1_reg_833_pp0_iter2_reg <= icmp_ln1057_1_reg_833;
                icmp_ln1057_1_reg_833_pp0_iter3_reg <= icmp_ln1057_1_reg_833_pp0_iter2_reg;
                icmp_ln1057_1_reg_833_pp0_iter4_reg <= icmp_ln1057_1_reg_833_pp0_iter3_reg;
                icmp_ln1057_1_reg_833_pp0_iter5_reg <= icmp_ln1057_1_reg_833_pp0_iter4_reg;
                icmp_ln1057_1_reg_833_pp0_iter6_reg <= icmp_ln1057_1_reg_833_pp0_iter5_reg;
                icmp_ln1057_1_reg_833_pp0_iter7_reg <= icmp_ln1057_1_reg_833_pp0_iter6_reg;
                icmp_ln1057_1_reg_833_pp0_iter8_reg <= icmp_ln1057_1_reg_833_pp0_iter7_reg;
                icmp_ln1057_1_reg_833_pp0_iter9_reg <= icmp_ln1057_1_reg_833_pp0_iter8_reg;
                icmp_ln1057_reg_819_pp0_iter2_reg <= icmp_ln1057_reg_819;
                icmp_ln1057_reg_819_pp0_iter3_reg <= icmp_ln1057_reg_819_pp0_iter2_reg;
                icmp_ln1057_reg_819_pp0_iter4_reg <= icmp_ln1057_reg_819_pp0_iter3_reg;
                icmp_ln1057_reg_819_pp0_iter5_reg <= icmp_ln1057_reg_819_pp0_iter4_reg;
                icmp_ln1057_reg_819_pp0_iter6_reg <= icmp_ln1057_reg_819_pp0_iter5_reg;
                icmp_ln1057_reg_819_pp0_iter7_reg <= icmp_ln1057_reg_819_pp0_iter6_reg;
                icmp_ln1057_reg_819_pp0_iter8_reg <= icmp_ln1057_reg_819_pp0_iter7_reg;
                r_V_3_reg_865 <= grp_fu_749_p2;
                tmp_reg_885 <= grp_fu_632_p2(49 downto 45);
                trunc_ln1168_reg_880 <= trunc_ln1168_fu_638_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1057_fu_227_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln1057_1_reg_833 <= icmp_ln1057_1_fu_330_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln223_1_fu_450_p2 <= std_logic_vector(unsigned(letters_V_3_fu_96) + unsigned(ap_const_lv3_1));
    add_ln223_2_fu_472_p2 <= std_logic_vector(unsigned(letters_V_2_fu_92) + unsigned(ap_const_lv3_1));
    add_ln223_3_fu_494_p2 <= std_logic_vector(unsigned(letters_V_1_fu_88) + unsigned(ap_const_lv3_1));
    add_ln223_4_fu_516_p2 <= std_logic_vector(unsigned(letters_V_fu_84) + unsigned(ap_const_lv3_1));
    add_ln223_fu_422_p2 <= std_logic_vector(unsigned(letters_V_4_fu_100) + unsigned(ap_const_lv3_1));
    and_ln1057_fu_699_p2 <= (xor_ln1548_fu_675_p2 and icmp_ln1057_1_reg_833_pp0_iter9_reg);
    and_ln123_1_fu_404_p2 <= (icmp_ln1049_3_fu_392_p2 and icmp_ln1049_2_fu_386_p2);
    and_ln123_2_fu_410_p2 <= (and_ln123_fu_398_p2 and and_ln123_1_fu_404_p2);
    and_ln123_fu_398_p2 <= (icmp_ln1049_fu_374_p2 and icmp_ln1049_1_fu_380_p2);
    and_ln125_fu_444_p2 <= (icmp_ln1049_1_fu_380_p2 and and_ln123_1_fu_404_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln1057_fu_227_p2)
    begin
        if (((icmp_ln1057_fu_227_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter9_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter9_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    chsq_V_1_fu_732_p3 <= 
        lhs_V_fu_112 when (tmp_3_fu_667_p3(0) = '1') else 
        chsq_V_fu_724_p3;
    chsq_V_2_out <= lhs_V_fu_112;

    chsq_V_2_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln1057_reg_819_pp0_iter8_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln1057_reg_819_pp0_iter8_reg = ap_const_lv1_1))) then 
            chsq_V_2_out_ap_vld <= ap_const_logic_1;
        else 
            chsq_V_2_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    chsq_V_fu_724_p3 <= 
        tmp_5_fu_704_p4 when (and_ln1057_fu_699_p2(0) = '1') else 
        tmp_6_fu_714_p4;
    chsq_inc_V_fu_657_p3 <= 
        trunc_ln1168_reg_880 when (icmp_ln1549_fu_652_p2(0) = '1') else 
        ap_const_lv46_200000000000;
    ev_V_2_fu_615_p3 <= 
        sub_ln712_fu_603_p2 when (icmp_ln1547_fu_597_p2(0) = '1') else 
        sub_ln712_1_fu_609_p2;
    evalue_V_address0 <= zext_ln573_fu_324_p1(10 - 1 downto 0);

    evalue_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            evalue_V_ce0 <= ap_const_logic_1;
        else 
            evalue_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    evalue_rev_V_address0 <= zext_ln573_fu_324_p1(10 - 1 downto 0);

    evalue_rev_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            evalue_rev_V_ce0 <= ap_const_logic_1;
        else 
            evalue_rev_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    freq4_V_address0 <= zext_ln573_2_fu_347_p1(10 - 1 downto 0);

    freq4_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            freq4_V_ce0 <= ap_const_logic_1;
        else 
            freq4_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    freq5_V_address0 <= zext_ln573_1_fu_336_p1(12 - 1 downto 0);

    freq5_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            freq5_V_ce0 <= ap_const_logic_1;
        else 
            freq5_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_632_p0 <= grp_fu_632_p00(32 - 1 downto 0);
    grp_fu_632_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_3_reg_865),50));
    grp_fu_632_p1 <= grp_fu_632_p10(18 - 1 downto 0);
    grp_fu_632_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ev_r_V_reg_849_pp0_iter6_reg),50));
    grp_fu_749_p0 <= zext_ln1169_fu_623_p1(16 - 1 downto 0);
    grp_fu_749_p1 <= zext_ln1169_fu_623_p1(16 - 1 downto 0);
    i_V_2_fu_233_p2 <= std_logic_vector(unsigned(i_V_fu_116) + unsigned(ap_const_lv12_1));
    icmp_ln1049_1_fu_380_p2 <= "1" when (letters_V_2_fu_92 = ap_const_lv3_4) else "0";
    icmp_ln1049_2_fu_386_p2 <= "1" when (letters_V_1_fu_88 = ap_const_lv3_4) else "0";
    icmp_ln1049_3_fu_392_p2 <= "1" when (letters_V_fu_84 = ap_const_lv3_4) else "0";
    icmp_ln1049_4_fu_416_p2 <= "1" when (letters_V_4_fu_100 = ap_const_lv3_4) else "0";
    icmp_ln1049_fu_374_p2 <= "1" when (letters_V_3_fu_96 = ap_const_lv3_4) else "0";
    icmp_ln1057_1_fu_330_p2 <= "1" when (unsigned(i_V_fu_116) < unsigned(ap_const_lv12_C35)) else "0";
    icmp_ln1057_fu_227_p2 <= "1" when (i_V_fu_116 = ap_const_lv12_EA6) else "0";
    icmp_ln1547_fu_597_p2 <= "1" when (unsigned(zext_ln51_fu_570_p1) > unsigned(ov_V_fu_589_p3)) else "0";
    icmp_ln1549_fu_652_p2 <= "1" when (tmp_reg_885 = ap_const_lv5_0) else "0";
    index4_V_1_fu_352_p2 <= std_logic_vector(unsigned(index4_V_fu_104) + unsigned(ap_const_lv12_1));
    index4_V_2_fu_358_p3 <= 
        index4_V_fu_104 when (icmp_ln1057_1_fu_330_p2(0) = '1') else 
        index4_V_1_fu_352_p2;
    index5_V_1_fu_341_p2 <= std_logic_vector(unsigned(index5_V_fu_108) + unsigned(ap_const_lv12_1));
    index5_V_2_fu_366_p3 <= 
        index5_V_1_fu_341_p2 when (icmp_ln1057_1_fu_330_p2(0) = '1') else 
        index5_V_fu_108;
    letters_V_5_fu_436_p3 <= 
        select_ln124_fu_428_p3 when (and_ln123_2_fu_410_p2(0) = '1') else 
        letters_V_4_fu_100;
    letters_V_6_fu_464_p3 <= 
        select_ln126_fu_456_p3 when (and_ln125_fu_444_p2(0) = '1') else 
        letters_V_3_fu_96;
    letters_V_7_fu_486_p3 <= 
        select_ln128_fu_478_p3 when (and_ln123_1_fu_404_p2(0) = '1') else 
        letters_V_2_fu_92;
    letters_V_8_fu_508_p3 <= 
        select_ln129_fu_500_p3 when (icmp_ln1049_3_fu_392_p2(0) = '1') else 
        letters_V_1_fu_88;
    letters_V_9_fu_522_p3 <= 
        ap_const_lv3_0 when (icmp_ln1049_3_fu_392_p2(0) = '1') else 
        add_ln223_4_fu_516_p2;
    lhs_V_1_fu_681_p3 <= (lhs_V_fu_112 & ap_const_lv8_0);
    ov_V_fu_589_p3 <= (select_ln1057_fu_582_p3 & ap_const_lv4_0);
    pattern_V_fu_310_p6 <= ((((trunc_ln_fu_260_p4 & tmp_1_fu_290_p4) & trunc_ln223_3_fu_270_p4) & tmp_2_fu_300_p4) & ret_7_fu_280_p4);
    ret_7_fu_280_p4 <= letters_V_fu_84(2 downto 1);
    ret_V_1_fu_694_p2 <= std_logic_vector(unsigned(lhs_V_1_fu_681_p3) - unsigned(chsq_inc_V_reg_890));
    ret_V_fu_689_p2 <= std_logic_vector(unsigned(lhs_V_1_fu_681_p3) + unsigned(chsq_inc_V_reg_890));
    select_ln1057_fu_582_p3 <= 
        trunc_ln1057_fu_574_p1 when (icmp_ln1057_1_reg_833(0) = '1') else 
        trunc_ln1057_1_fu_578_p1;
    select_ln124_fu_428_p3 <= 
        ap_const_lv3_6 when (icmp_ln1049_4_fu_416_p2(0) = '1') else 
        add_ln223_fu_422_p2;
    select_ln126_fu_456_p3 <= 
        ap_const_lv3_0 when (icmp_ln1049_fu_374_p2(0) = '1') else 
        add_ln223_1_fu_450_p2;
    select_ln128_fu_478_p3 <= 
        ap_const_lv3_0 when (icmp_ln1049_1_fu_380_p2(0) = '1') else 
        add_ln223_2_fu_472_p2;
    select_ln129_fu_500_p3 <= 
        ap_const_lv3_0 when (icmp_ln1049_2_fu_386_p2(0) = '1') else 
        add_ln223_3_fu_494_p2;
    sub_ln712_1_fu_609_p2 <= std_logic_vector(unsigned(ov_V_fu_589_p3) - unsigned(zext_ln51_fu_570_p1));
    sub_ln712_fu_603_p2 <= std_logic_vector(unsigned(zext_ln51_fu_570_p1) - unsigned(ov_V_fu_589_p3));
    tmp_1_fu_290_p4 <= letters_V_3_fu_96(2 downto 1);
    tmp_2_fu_300_p4 <= letters_V_1_fu_88(2 downto 1);
    tmp_3_fu_667_p3 <= lhs_V_fu_112(37 downto 37);
    tmp_5_fu_704_p4 <= ret_V_fu_689_p2(45 downto 8);
    tmp_6_fu_714_p4 <= ret_V_1_fu_694_p2(45 downto 8);
    trunc_ln1057_1_fu_578_p1 <= freq4_V_q0(12 - 1 downto 0);
    trunc_ln1057_fu_574_p1 <= freq5_V_q0(12 - 1 downto 0);
    trunc_ln1168_fu_638_p1 <= grp_fu_632_p2(46 - 1 downto 0);
    trunc_ln223_3_fu_270_p4 <= letters_V_2_fu_92(2 downto 1);
    trunc_ln_fu_260_p4 <= letters_V_4_fu_100(2 downto 1);
    xor_ln1548_fu_675_p2 <= (tmp_3_fu_667_p3 xor ap_const_lv1_1);
    zext_ln1169_fu_623_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ev_V_2_reg_854),32));
    zext_ln51_fu_570_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(evalue_V_q0),16));
    zext_ln573_1_fu_336_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index5_V_fu_108),64));
    zext_ln573_2_fu_347_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index4_V_fu_104),64));
    zext_ln573_fu_324_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pattern_V_fu_310_p6),64));
end behav;
