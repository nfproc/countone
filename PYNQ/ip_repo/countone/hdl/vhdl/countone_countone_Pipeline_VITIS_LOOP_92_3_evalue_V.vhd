-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity countone_countone_Pipeline_VITIS_LOOP_92_3_evalue_V is 
    generic(
             DataWidth     : integer := 15; 
             AddressWidth     : integer := 10; 
             AddressRange    : integer := 1024
    ); 
    port (
          address0      : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DataWidth-1 downto 0);
          reset     : in std_logic;
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of countone_countone_Pipeline_VITIS_LOOP_92_3_evalue_V is 

signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 
type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 
signal mem : mem_array := (
    0 => "000000100000010", 1 => "000000110000110", 2 => "000000111101000", 
    3 => "000000000000000", 4 => "000000110000110", 5 => "000001001001111", 
    6 => "000001011100011", 7 => "000000000000000", 8 => "000000111101000", 
    9 => "000001011100011", 10 => "000001110011100", 11 to 15=> "000000000000000", 
    16 => "000000110000110", 17 => "000001001001111", 18 => "000001011100011", 
    19 => "000000000000000", 20 => "000001001001111", 21 => "000001101111111", 
    22 => "000010001011111", 23 => "000000000000000", 24 => "000001011100011", 
    25 => "000010001011111", 26 => "000010101110111", 27 to 31=> "000000000000000", 
    32 => "000000111101000", 33 => "000001011100011", 34 => "000001110011100", 
    35 => "000000000000000", 36 => "000001011100011", 37 => "000010001011111", 
    38 => "000010101110111", 39 => "000000000000000", 40 => "000001110011100", 
    41 => "000010101110111", 42 => "000011011010101", 43 to 63=> "000000000000000", 
    64 => "000000110000110", 65 => "000001001001111", 66 => "000001011100011", 
    67 => "000000000000000", 68 => "000001001001111", 69 => "000001101111111", 
    70 => "000010001011111", 71 => "000000000000000", 72 => "000001011100011", 
    73 => "000010001011111", 74 => "000010101110111", 75 to 79=> "000000000000000", 
    80 => "000001001001111", 81 => "000001101111111", 82 => "000010001011111", 
    83 => "000000000000000", 84 => "000001101111111", 85 => "000010101001011", 
    86 => "000011010011110", 87 => "000000000000000", 88 => "000010001011111", 
    89 => "000011010011110", 90 => "000100001000110", 91 to 95=> "000000000000000", 
    96 => "000001011100011", 97 => "000010001011111", 98 => "000010101110111", 
    99 => "000000000000000", 100 => "000010001011111", 101 => "000011010011110", 
    102 => "000100001000110", 103 => "000000000000000", 104 => "000010101110111", 
    105 => "000100001000110", 106 => "000101001010111", 107 to 127=> "000000000000000", 
    128 => "000000111101000", 129 => "000001011100011", 130 => "000001110011100", 
    131 => "000000000000000", 132 => "000001011100011", 133 => "000010001011111", 
    134 => "000010101110111", 135 => "000000000000000", 136 => "000001110011100", 
    137 => "000010101110111", 138 => "000011011010101", 139 to 143=> "000000000000000", 
    144 => "000001011100011", 145 => "000010001011111", 146 => "000010101110111", 
    147 => "000000000000000", 148 => "000010001011111", 149 => "000011010011110", 
    150 => "000100001000110", 151 => "000000000000000", 152 => "000010101110111", 
    153 => "000100001000110", 154 => "000101001010111", 155 to 159=> "000000000000000", 
    160 => "000001110011100", 161 => "000010101110111", 162 => "000011011010101", 
    163 => "000000000000000", 164 => "000010101110111", 165 => "000100001000110", 
    166 => "000101001010111", 167 => "000000000000000", 168 => "000011011010101", 
    169 => "000101001010111", 170 => "000110011101101", 171 to 255=> "000000000000000", 
    256 => "000000110000110", 257 => "000001001001111", 258 => "000001011100011", 
    259 => "000000000000000", 260 => "000001001001111", 261 => "000001101111111", 
    262 => "000010001011111", 263 => "000000000000000", 264 => "000001011100011", 
    265 => "000010001011111", 266 => "000010101110111", 267 to 271=> "000000000000000", 
    272 => "000001001001111", 273 => "000001101111111", 274 => "000010001011111", 
    275 => "000000000000000", 276 => "000001101111111", 277 => "000010101001011", 
    278 => "000011010011110", 279 => "000000000000000", 280 => "000010001011111", 
    281 => "000011010011110", 282 => "000100001000110", 283 to 287=> "000000000000000", 
    288 => "000001011100011", 289 => "000010001011111", 290 => "000010101110111", 
    291 => "000000000000000", 292 => "000010001011111", 293 => "000011010011110", 
    294 => "000100001000110", 295 => "000000000000000", 296 => "000010101110111", 
    297 => "000100001000110", 298 => "000101001010111", 299 to 319=> "000000000000000", 
    320 => "000001001001111", 321 => "000001101111111", 322 => "000010001011111", 
    323 => "000000000000000", 324 => "000001101111111", 325 => "000010101001011", 
    326 => "000011010011110", 327 => "000000000000000", 328 => "000010001011111", 
    329 => "000011010011110", 330 => "000100001000110", 331 to 335=> "000000000000000", 
    336 => "000001101111111", 337 => "000010101001011", 338 => "000011010011110", 
    339 => "000000000000000", 340 => "000010101001011", 341 => "000100000000011", 
    342 => "000101000000100", 343 => "000000000000000", 344 => "000011010011110", 
    345 => "000101000000100", 346 => "000110010000101", 347 to 351=> "000000000000000", 
    352 => "000010001011111", 353 => "000011010011110", 354 => "000100001000110", 
    355 => "000000000000000", 356 => "000011010011110", 357 => "000101000000100", 
    358 => "000110010000101", 359 => "000000000000000", 360 => "000100001000110", 
    361 => "000110010000101", 362 => "000111110100111", 363 to 383=> "000000000000000", 
    384 => "000001011100011", 385 => "000010001011111", 386 => "000010101110111", 
    387 => "000000000000000", 388 => "000010001011111", 389 => "000011010011110", 
    390 => "000100001000110", 391 => "000000000000000", 392 => "000010101110111", 
    393 => "000100001000110", 394 => "000101001010111", 395 to 399=> "000000000000000", 
    400 => "000010001011111", 401 => "000011010011110", 402 => "000100001000110", 
    403 => "000000000000000", 404 => "000011010011110", 405 => "000101000000100", 
    406 => "000110010000101", 407 => "000000000000000", 408 => "000100001000110", 
    409 => "000110010000101", 410 => "000111110100111", 411 to 415=> "000000000000000", 
    416 => "000010101110111", 417 => "000100001000110", 418 => "000101001010111", 
    419 => "000000000000000", 420 => "000100001000110", 421 => "000110010000101", 
    422 => "000111110100111", 423 => "000000000000000", 424 => "000101001010111", 
    425 => "000111110100111", 426 => "001001110010000", 427 to 511=> "000000000000000", 
    512 => "000000111101000", 513 => "000001011100011", 514 => "000001110011100", 
    515 => "000000000000000", 516 => "000001011100011", 517 => "000010001011111", 
    518 => "000010101110111", 519 => "000000000000000", 520 => "000001110011100", 
    521 => "000010101110111", 522 => "000011011010101", 523 to 527=> "000000000000000", 
    528 => "000001011100011", 529 => "000010001011111", 530 => "000010101110111", 
    531 => "000000000000000", 532 => "000010001011111", 533 => "000011010011110", 
    534 => "000100001000110", 535 => "000000000000000", 536 => "000010101110111", 
    537 => "000100001000110", 538 => "000101001010111", 539 to 543=> "000000000000000", 
    544 => "000001110011100", 545 => "000010101110111", 546 => "000011011010101", 
    547 => "000000000000000", 548 => "000010101110111", 549 => "000100001000110", 
    550 => "000101001010111", 551 => "000000000000000", 552 => "000011011010101", 
    553 => "000101001010111", 554 => "000110011101101", 555 to 575=> "000000000000000", 
    576 => "000001011100011", 577 => "000010001011111", 578 => "000010101110111", 
    579 => "000000000000000", 580 => "000010001011111", 581 => "000011010011110", 
    582 => "000100001000110", 583 => "000000000000000", 584 => "000010101110111", 
    585 => "000100001000110", 586 => "000101001010111", 587 to 591=> "000000000000000", 
    592 => "000010001011111", 593 => "000011010011110", 594 => "000100001000110", 
    595 => "000000000000000", 596 => "000011010011110", 597 => "000101000000100", 
    598 => "000110010000101", 599 => "000000000000000", 600 => "000100001000110", 
    601 => "000110010000101", 602 => "000111110100111", 603 to 607=> "000000000000000", 
    608 => "000010101110111", 609 => "000100001000110", 610 => "000101001010111", 
    611 => "000000000000000", 612 => "000100001000110", 613 => "000110010000101", 
    614 => "000111110100111", 615 => "000000000000000", 616 => "000101001010111", 
    617 => "000111110100111", 618 => "001001110010000", 619 to 639=> "000000000000000", 
    640 => "000001110011100", 641 => "000010101110111", 642 => "000011011010101", 
    643 => "000000000000000", 644 => "000010101110111", 645 => "000100001000110", 
    646 => "000101001010111", 647 => "000000000000000", 648 => "000011011010101", 
    649 => "000101001010111", 650 => "000110011101101", 651 to 655=> "000000000000000", 
    656 => "000010101110111", 657 => "000100001000110", 658 => "000101001010111", 
    659 => "000000000000000", 660 => "000100001000110", 661 => "000110010000101", 
    662 => "000111110100111", 663 => "000000000000000", 664 => "000101001010111", 
    665 => "000111110100111", 666 => "001001110010000", 667 to 671=> "000000000000000", 
    672 => "000011011010101", 673 => "000101001010111", 674 => "000110011101101", 
    675 => "000000000000000", 676 => "000101001010111", 677 => "000111110100111", 
    678 => "001001110010000", 679 => "000000000000000", 680 => "000110011101101", 
    681 => "001001110010000", 682 => "001100001110101", 683 to 767=> "000000000000000", 
    768 => "000011011111011", 769 => "000101010010001", 770 => "000110100110101", 
    771 => "000000000000000", 772 => "000101010010001", 773 => "000111111111110", 
    774 => "001001111111101", 775 => "000000000000000", 776 => "000110100110101", 
    777 => "001001111111101", 778 => "001100011111101", 779 to 783=> "000000000000000", 
    784 => "000101010010001", 785 => "000111111111110", 786 => "001001111111101", 
    787 => "000000000000000", 788 => "000111111111110", 789 => "001100000110100", 
    790 => "001111001000001", 791 => "000000000000000", 792 => "001001111111101", 
    793 => "001111001000001", 794 => "010010111010010", 795 to 799=> "000000000000000", 
    800 => "000110100110101", 801 => "001001111111101", 802 => "001100011111101", 
    803 => "000000000000000", 804 => "001001111111101", 805 => "001111001000001", 
    806 => "010010111010010", 807 => "000000000000000", 808 => "001100011111101", 
    809 => "010010111010010", 810 => "010111101000111", 811 to 831=> "000000000000000", 
    832 => "000101010010001", 833 => "000111111111110", 834 => "001001111111101", 
    835 => "000000000000000", 836 => "000111111111110", 837 => "001100000110100", 
    838 => "001111001000001", 839 => "000000000000000", 840 => "001001111111101", 
    841 => "001111001000001", 842 => "010010111010010", 843 to 847=> "000000000000000", 
    848 => "000111111111110", 849 => "001100000110100", 850 => "001111001000001", 
    851 => "000000000000000", 852 => "001100000110100", 853 => "010010010100010", 
    854 => "010110111001011", 855 => "000000000000000", 856 => "001111001000001", 
    857 => "010110111001011", 858 => "011100100111110", 859 to 863=> "000000000000000", 
    864 => "001001111111101", 865 => "001111001000001", 866 => "010010111010010", 
    867 => "000000000000000", 868 => "001111001000001", 869 => "010110111001011", 
    870 => "011100100111110", 871 => "000000000000000", 872 => "010010111010010", 
    873 => "011100100111110", 874 => "100011110001110", 875 to 895=> "000000000000000", 
    896 => "000110100110101", 897 => "001001111111101", 898 => "001100011111101", 
    899 => "000000000000000", 900 => "001001111111101", 901 => "001111001000001", 
    902 => "010010111010010", 903 => "000000000000000", 904 => "001100011111101", 
    905 => "010010111010010", 906 => "010111101000111", 907 to 911=> "000000000000000", 
    912 => "001001111111101", 913 => "001111001000001", 914 => "010010111010010", 
    915 => "000000000000000", 916 => "001111001000001", 917 => "010110111001011", 
    918 => "011100100111110", 919 => "000000000000000", 920 => "010010111010010", 
    921 => "011100100111110", 922 => "100011110001110", 923 to 927=> "000000000000000", 
    928 => "001100011111101", 929 => "010010111010010", 930 => "010111101000111", 
    931 => "000000000000000", 932 => "010010111010010", 933 => "011100100111110", 
    934 => "100011110001110", 935 => "000000000000000", 936 => "010111101000111", 
    937 => "100011110001110", 938 => "101100101110001", 939 to 1023=> "000000000000000" );


begin 


memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(address0_tmp)); 
        end if;
    end if;
end process;

end rtl;

